version: '3.8'

networks:
  monitoring-network:
    driver: bridge
  redis-exporter:
    driver: bridge

volumes:
  prometheus-data:
  clickhouse-data:
  grafana-data:


services:
  #  traefik:
  #    image: "traefik:v3.3"
  #    container_name: "traefik"
  #    command:
  #      #- "--log.level=DEBUG"
  #      - "--api.insecure=true"
  #      - "--providers.docker=true"
  #      - "--providers.docker.exposedbydefault=false"
  #      - "--entryPoints.web.address=:80"
  #    ports:
  #      - "80:80"
  #      - "8080:8080"
  #    volumes:
  #      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #    networks:
  #      - traefiknet
  #  
  #  whoami:
  #    image: "traefik/whoami"
  #    container_name: "simple-service"
  #    labels:
  #      - "traefik.enable=true"
  #      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
  #      - "traefik.http.routers.whoami.entrypoints=web"
  #    networks:
  #      - traefiknet
  
  #  api_empty:
  #    image: noieeen/emptyapi
  #    container_name: empty_api
  #    platform: linux/amd64
  #    build:
  #      context: ..
  #      dockerfile: EmptyAPI/Dockerfile
  #    ports:
  #      - "9010:8080"
  # depends_on:
  #   - otel-collector
  # networks:
  #   - monitoring-network
  
  # # Service A: Main application
  # service_a:
  #   image: noieeen/servicea
  #   platform: linux/amd64
  #   build:
  #     context: .
  #     dockerfile: ../ServiceA/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   ports:
  #     - "8081:8080"
  #   depends_on:
  #     - otel-collector
  #   networks:
  #     - monitoring-network
  
  # # Service B: 2nd application
  # service_b:
  #   image: noieeen/serviceb
  #   platform: linux/amd64
  #   build:
  #     context: .
  #     dockerfile: ../ServiceB/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   ports:
  #     - "8082:8080"
  #   depends_on:
  #     - otel-collector
  #   networks:
  #     - monitoring-network
  
  # # Service Auth
  # service_auth: # connect mssql
  #   image: noieeen/serviceauth
  #   platform: linux/amd64
  #   build:
  #     context: ..
  #     dockerfile: AuthService/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   ports:
  #     - "8083:8080"
  #   depends_on:
  #     otel-collector:
  #       condition: service_started
  #     database-server:
  #       condition: service_healthy
  #   networks:
  #     - monitoring-network
  
  #   # API
  # api_auth:
  #   image: noieeen/auth.api
  #   platform: linux/amd64
  #   build:
  #     context: ..
  #     dockerfile: Auth.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   ports:
  #     - "9001:8080"
  #   depends_on:
  #     otel-collector:
  #       condition: service_started
  #     database-server:
  #       condition: service_healthy
  #   networks:
  #     - monitoring-network
  
  # api_store:
  #   image: noieeen/store.api
  #   platform: linux/amd64
  #   build:
  #     context: ..
  #     dockerfile: Store.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #   ports:
  #     - "9002:8080"
  #   depends_on:
  #     otel-collector:
  #       condition: service_started
  #     database-server:
  #       condition: service_healthy
  #   networks:
  #     - monitoring-network
  
  
  
  
  
  
  
  
  # OpenTelemetry Collector for monitoring
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    platform: linux/amd64
    container_name: otel-collector
    command: [ "--config=/etc/otelcol-contrib/config.yaml" ]
    volumes:
      - ../configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics extension
      - "13133:13133" # Health check
    networks:
      - monitoring-network
    depends_on:
      clickhouse:
        condition: service_healthy
    
    # Prometheus for metrics storage
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: prometheus
    volumes:
      - ../configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      
      # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    platform: linux/amd64
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # Model
      - "14268:14268"  # Jaeger-collector HTTP
    networks:
      - monitoring-network
    
    # Vector for log processing
  vector:
    image: timberio/vector:0.45.0-debian
    platform: linux/amd64
    command: [ "--config=/etc/vector/vector.toml" ] #,"--verbose" 
    volumes:
      - ../configs/vector.toml:/etc/vector/vector.toml
    ports:
      - "8383:8383"  # Vector API server
      - "9598:9598"  # Vector metrics endpoint for Prometheus
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - clickhouse
      - otel-collector
  
  # ClickHouse for log storage
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    platform: linux/amd64
    container_name: clickhouse
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8123/ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - clickhouse-data
      - ../configs/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../configs/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml
      - ../configs/clickhouse-users.xml:/etc/clickhouse-server/users.d/logging.xml
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    environment:
      - CLICKHOUSE_DB=logs
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - CLICKHOUSE_ALWAYS_RUN_INITDB_SCRIPTS=1
    networks:
      - monitoring-network
    
    # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: grafana
    volumes:
      # - ../data/grafana-data:/var/lib/grafana
      - ../configs/grafana/provisioning:/etc/grafana/provisioning
      - ../configs/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_INSTALL_PLUGINS=maormil-rabbitmq-datasource
    ports:
      - "80:3000"
    depends_on:
      - prometheus
      # - jaeger
      - clickhouse
    networks:
      - monitoring-network
  

